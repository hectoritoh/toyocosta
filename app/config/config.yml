imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: @CelmediaToyocostaPirelliBundle/Resources/config/admin.yml }


sonata_user:
    security_acl: true
    manager_type: orm # c

gregwar_captcha: ~

sonata_block:
    default_contexts: [cms]
    blocks:

        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)

        #...
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        # Enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts:   [admin]
        # Your other blocks
        sonata.block.service.text:
        sonata.block.service.rss:
        sonata.admin.block.search_result:
            contexts: [admin]

sonata_admin:
    # Se agrego template para agregar css y js de formatter 
    templates:
            # default global templates
            layout:  SonataAdminBundle::layout.html.twig
    title:      Admin
    title_logo: bundles/celmediatoyocostavehiculos/images/pirelli/toyocosta.png
    # templates:
    #     dashboard: SonataAdminBundle:Core:dashboard.html.twig
    #     # other configuration options
    #     search:              SonataAdminBundle:Core:search.html.twig
    #     search_result_block: SonataAdminBundle:Block:block_search_result.html.twig

    #     list:                       SonataAdminBundle:CRUD:list.html.twig
    #     action:                     SonataAdminBundle:CRUD:action.html.twig
    #     select:                     SonataAdminBundle:CRUD:list__select.html.twig
    #     list_block:                 SonataAdminBundle:Block:block_admin_list.html.twig
    #     short_object_description:   SonataAdminBundle:Helper:short-object-description.html.twig
    #     batch:                      SonataAdminBundle:CRUD:list__batch.html.twig
    #     inner_list_row:             SonataAdminBundle:CRUD:list_inner_row.html.twig
    #     base_list_field:            SonataAdminBundle:CRUD:base_list_field.html.twig
    #     pager_links:                SonataAdminBundle:Pager:links.html.twig
    #     pager_results:              SonataAdminBundle:Pager:results.html.twig

    dashboard:
        blocks:
            # -
            #     position: left
            #     type: sonata.admin.block.admin_list
            # -
            #     position: left
            #     type: sonata.admin.block.admin_list
            #     settings:
            #         groups: [Vehiculos, Montacargas]
            # -
            #     position: right
            #     type: sonata.admin.block.admin_list
            #     settings:
            #         groups: [Pirelli]
            # -
            #     position: right
            #     type: sonata.admin.block.admin_list
            #     settings:
            #         groups: [Seminuevo, Contenido]
            -
                position: left
                type: sonata.block.service.text
                settings:
                    content: >
                        <h2>BIENVENIDO!!</h2>
                        <p>Bienvenido al administrador de <code>TOYOCOSTA</code>, aqui podras manejar todo el contenido de
                        la pagina principal, funciones que incluye edicion, agregar y visualizar la 
                        informacion deseada.</p> <br /> 
                        Del lado izquierdo se encuentran los bloques que ha sido segmentada la pagina.
            # -
            #     position: right
            #     type: sonata.block.service.rss
            #     settings:
            #         title: Sonata Project's Feeds
            #         url: http://sonata-project.org/blog/archive.rss

framework:
    #esi:             ~
    translator:      { fallback: "%locale%" }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "en"
    trusted_proxies: ~
    session:         ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

    form:
        resources:
            # - 'SonataAdminBundle:Form:silex_form_div_layout.html.twig'
            - 'SonataFormatterBundle:Form:formatter.html.twig'
            - 'SonataMediaBundle:Form:media_widgets.html.twig'

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        [ CelmediaToyocostaPirelliBundle, CelmediaToyocostaVehiculosBundle, CelmediaToyocostaSeminuevoBundle, CelmediaToyocostaContenidoBundle,  CelmediaToyocostaMontacargasBundle,   CelmediaToyocostaMotosBundle]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver, add the path in parameters.yml
        # e.g. database_path: "%kernel.root_dir%/data/data.db3"
        # path:     "%database_path%"
        types:
            json: Sonata\Doctrine\Types\JsonType
    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        auto_mapping: true
        # entity_managers:
        #     default:
        #         mappings:
        #             SonataMediaBundle: ~

# doctrine_phpcr:
#     odm:
#         auto_mapping: true
#         mappings:
#             SonataMediaBundle:
#                 prefix: Sonata\MediaBundle\PHPCR

sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    default_context: default
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr
    contexts:
        default:  # the default context is mandatory
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
                preview:   { width: 100, quality: 100}
                small:     { width: 200, quality: 100}
                big:       { width: 800 , quality: 70}
                slider:    { width: 1905 , quality: 100}
        montacarga:
            providers:
                - sonata.media.provider.image
                - sonata.media.provider.youtube

            formats:
                preview:   { width: 100, quality: 100}
                small:     { width: 200, quality: 100}
                large:     { width: 730, quality: 100}

    cdn:
        server:
            path: http://www.toyocosta.com/web/uploads/media # http://media.sonata-project.org/
            # path: http://localhost/toyocostaweb/web/uploads/media # http://media.sonata-project.org/

    filesystem:
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     false
    providers:
        image:
            resizer: sonata.media.resizer.square


# fos_user:
#     db_driver: orm # other valid values are 'mongodb', 'couchdb' and 'propel'
#     firewall_name: main
#     user_class: Celmedia\Toyocosta\PirelliBundle\Entity\User


fos_user:
    db_driver:      orm # can be orm or odm
    firewall_name:  main
    user_class:     Application\Sonata\UserBundle\Entity\User


    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager                    # If you're using doctrine orm (use sonata.user.mongodb.user_manager for mongodb)

    service:
        user_manager: sonata.user.orm.user_manager                      # If you're using doctrine orm (use sonata.user.mongodb.group_manager for mongodb)


# Swiftmailer Configuration
# swiftmailer:
#    transport:  smtp
#    host:       smtp.gmail.com
#    username:   webtoyocosta@gmail.com
#    password:   web_toyota
#    auth_mode:  login
#    port:       587
#    encryption: tls
#    spool:     { type: memory }
swiftmailer:
    transport:  smtp
    encryption: ssl
    auth_mode:  login
    host:       smtp.gmail.com
    username:   webtoyocosta@gmail.com
    password:   web_toyota
# swiftmailer:
#    transport:  gmail
#    username:   webtoyocosta@gmail.com
#    password:   web_toyota
# swiftmailer:
#    transport:  smtp
#    host:       gator3155.hostgator.com
#    port:       465
#    encryption: ssl
#    username:   web@toyocosta.com
#    password:   Bf}0,XCL}7Ci

stof_doctrine_extensions:
    default_locale: en_US
    orm:
        default:
            sluggable:   true
            timestampable: true

# Sonata Formatter form widget
sonata_formatter:
    # ckeditor:
    #     templates:
    #         browser: 'SonataFormatterBundle:Ckeditor:browser.html.twig'
    #         upload: 'SonataFormatterBundle:Ckeditor:upload.html.twig'
    formatters:
        # markdown:
        #     service: sonata.formatter.text.markdown
        #     extensions:
        #         - sonata.formatter.twig.control_flow
        #         - sonata.formatter.twig.gist
        #         # - sonata.media.formatter.twig

        # text:
        #     service: sonata.formatter.text.text
        #     extensions:
        #         - sonata.formatter.twig.control_flow
        #         - sonata.formatter.twig.gist
        #         # - sonata.media.formatter.twig

        # rawhtml:
        #     service: sonata.formatter.text.raw
        #     extensions:
        #         - sonata.formatter.twig.control_flow
        #         - sonata.formatter.twig.gist
        #         # - sonata.media.formatter.twig

        richhtml:
            service: sonata.formatter.text.raw
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                # - sonata.media.formatter.twig

        # twig:
        #     service: sonata.formatter.text.twigengine
        #     extensions: [] # Twig formatter cannot have extensions
mobile_detect:
    redirect:
        mobile: ~
        tablet: ~
    switch_device_view: ~

hwi_oauth:
    # name of the firewall in which this bundle is active, this setting MUST be set
    firewall_name: secured_area
    resource_owners:
        facebook:
            type:          facebook
            client_id:     556243797790231
            client_secret: 81e9d210184c72e3b9a9f293a613eafc
#            infos_url:     https://graph.facebook.com/me?fields=username,name,picture.type(square)
            scope:         public_profile,email,user_friends
            paths:
                email:          email
                public_profile: public_profile
                profilepicture: picture.data.url     

        twitter:
            type:                twitter
            client_id:           rfRy86FcWo3FUIauuw0rqNyIb
            client_secret:       0XbnR8oOY50RNm86tfCTS6Z1WEuqlkjev4sINITIF6MVkXppDj




    http_client:
        verify_peer: false

    fosub:
        # try 30 times to check if a username is available (foo, foo1, foo2 etc)
        username_iterations: 30

        # mapping between resource owners (see below) and properties
        properties:
            facebook: facebookUId
            twitter:  twitterUId

    connect:
        account_connector: my_user_provider

services:
    hwi_oauth.user.provider.entity:
        class: HWI\Bundle\OAuthBundle\Security\Core\User\OAuthUserProvider
    # an optional setting to configure a query string parameter which can be used to redirect
    # the user after authentication, e.g. /connect/facebook?_destination=/my/destination will
    # redirect the user to /my/destination after facebook authenticates them.  If this is not
    # set then the user will be redirected to the original resource that they requested, or
    # the base address if no resource was requested.  This is similar to the behaviour of
    # [target_path_parameter for form login](http://symfony.com/doc/2.0/cookbook/security/form_login.html).
    # target_path_parameter: _destination

    # an optional setting to use the HTTP REFERER header to be used in case no
    # previous URL was stored in the session (i.e. no resource was requested).
    # This is similar to the behaviour of
    # [using the referring URL for form login](http://symfony.com/doc/2.0/cookbook/security/form_login.html#using-the-referring-url).
    # use_referer: true

    # here you will add one (or more) configurations for resource owners
    # and other settings you want to adjust in this bundle, just checkout the list below!
